AWSTemplateFormatVersion: '2010-09-09'
Description: 'Pete Booking Page - Complete AWS Infrastructure with CloudFront'

Parameters:
  Environment:
    Type: String
    Default: 'dev'
    Description: Environment name

Resources:
  # S3 Bucket for storing booking data and meetings
  BookingDataBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'petes-booking-data-${Environment}-${AWS::AccountId}'
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ['*']
            AllowedMethods: [GET, POST, PUT, DELETE]
            AllowedOrigins: ['*']
            MaxAge: 3000

  # S3 Bucket for Frontend (private - accessed via CloudFront)
  FrontendBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'petes-booking-frontend-${Environment}-${AWS::AccountId}'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  # CloudFront Origin Access Control
  OriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Sub 'petes-booking-oac-${Environment}'
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  # CloudFront Distribution
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - Id: S3Origin
            DomainName: !GetAtt FrontendBucket.RegionalDomainName
            S3OriginConfig:
              OriginAccessIdentity: ''
            OriginAccessControlId: !GetAtt OriginAccessControl.Id
        Enabled: true
        DefaultRootObject: index.html
        Comment: !Sub 'Pete Booking App - ${Environment}'
        DefaultCacheBehavior:
          AllowedMethods:
            - DELETE
            - GET
            - HEAD
            - OPTIONS
            - PATCH
            - POST
            - PUT
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6  # Managed-CachingOptimized
          OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf  # Managed-CORS-S3Origin
          ResponseHeadersPolicyId: 67f7725c-6f97-4210-82d7-5512b31e9d03  # Managed-SecurityHeadersPolicy
        CustomErrorResponses:
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
        PriceClass: PriceClass_100
        HttpVersion: http2

  # CloudFront Distribution Bucket Policy
  FrontendBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref FrontendBucket
      PolicyDocument:
        Statement:
          - Sid: AllowCloudFrontServicePrincipal
            Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: s3:GetObject
            Resource: !Sub '${FrontendBucket.Arn}/*'
            Condition:
              StringEquals:
                'AWS:SourceArn': !Sub 'arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}'

  # IAM Role for Lambda functions
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'petes-booking-lambda-role-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: S3AccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:ListBucket
                Resource:
                  - !GetAtt BookingDataBucket.Arn
                  - !Sub '${BookingDataBucket.Arn}/*'

  # API Gateway
  BookingApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub 'petes-booking-api-${Environment}'
      Description: 'API for Pete Booking Page'
      EndpointConfiguration:
        Types:
          - REGIONAL

  # Resources
  BookingsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref BookingApi
      ParentId: !GetAtt BookingApi.RootResourceId
      PathPart: 'bookings'

  BookingIdResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref BookingApi
      ParentId: !Ref BookingsResource
      PathPart: '{id}'

  MeetingsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref BookingApi
      ParentId: !GetAtt BookingApi.RootResourceId
      PathPart: 'meetings'

  MeetingIdResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref BookingApi
      ParentId: !Ref MeetingsResource
      PathPart: '{id}'

  AdminResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref BookingApi
      ParentId: !GetAtt BookingApi.RootResourceId
      PathPart: 'admin'

  ExportResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref BookingApi
      ParentId: !Ref AdminResource
      PathPart: 'export'

  # Lambda Functions
  BookingsFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'petes-booking-handler-${Environment}'
      Runtime: nodejs18.x
      Handler: bookings.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          BUCKET_NAME: !Ref BookingDataBucket
          ADMIN_PASSWORD: 'Skiing12!'
          AWS_REGION: !Ref AWS::Region
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            return {
              statusCode: 200,
              headers: {
                'Access-Control-Allow-Origin': '*',
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({ message: 'Placeholder' })
            };
          };

  MeetingsFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'petes-meetings-handler-${Environment}'
      Runtime: nodejs18.x
      Handler: meetings.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          BUCKET_NAME: !Ref BookingDataBucket
          ADMIN_PASSWORD: 'Skiing12!'
          AWS_REGION: !Ref AWS::Region
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            return {
              statusCode: 200,
              headers: {
                'Access-Control-Allow-Origin': '*',
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({ message: 'Placeholder' })
            };
          };

  AdminFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'petes-admin-handler-${Environment}'
      Runtime: nodejs18.x
      Handler: admin.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          BUCKET_NAME: !Ref BookingDataBucket
          ADMIN_PASSWORD: 'Skiing12!'
          AWS_REGION: !Ref AWS::Region
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            return {
              statusCode: 200,
              headers: {
                'Access-Control-Allow-Origin': '*',
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({ message: 'Placeholder' })
            };
          };

  # API Gateway Methods and Integrations
  BookingsGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref BookingApi
      ResourceId: !Ref BookingsResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BookingsFunction.Arn}/invocations'

  BookingsPostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref BookingApi
      ResourceId: !Ref BookingsResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BookingsFunction.Arn}/invocations'

  BookingDeleteMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref BookingApi
      ResourceId: !Ref BookingIdResource
      HttpMethod: DELETE
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BookingsFunction.Arn}/invocations'

  MeetingsGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref BookingApi
      ResourceId: !Ref MeetingsResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MeetingsFunction.Arn}/invocations'

  MeetingsPostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref BookingApi
      ResourceId: !Ref MeetingsResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MeetingsFunction.Arn}/invocations'

  MeetingsPutMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref BookingApi
      ResourceId: !Ref MeetingIdResource
      HttpMethod: PUT
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MeetingsFunction.Arn}/invocations'

  MeetingsDeleteMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref BookingApi
      ResourceId: !Ref MeetingIdResource
      HttpMethod: DELETE
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MeetingsFunction.Arn}/invocations'

  AdminGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref BookingApi
      ResourceId: !Ref AdminResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AdminFunction.Arn}/invocations'

  AdminExportMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref BookingApi
      ResourceId: !Ref ExportResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AdminFunction.Arn}/invocations'

  # CORS Options Methods
  BookingsOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref BookingApi
      ResourceId: !Ref BookingsResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Admin-Password'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  BookingIdOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref BookingApi
      ResourceId: !Ref BookingIdResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Admin-Password'"
              method.response.header.Access-Control-Allow-Methods: "'DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  MeetingsOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref BookingApi
      ResourceId: !Ref MeetingsResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Admin-Password'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  MeetingIdOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref BookingApi
      ResourceId: !Ref MeetingIdResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Admin-Password'"
              method.response.header.Access-Control-Allow-Methods: "'PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  AdminOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref BookingApi
      ResourceId: !Ref AdminResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Admin-Password'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  ExportOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref BookingApi
      ResourceId: !Ref ExportResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Admin-Password'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # API Gateway Deployment
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - BookingsGetMethod
      - BookingsPostMethod
      - BookingDeleteMethod
      - MeetingsGetMethod
      - MeetingsPostMethod
      - MeetingsPutMethod
      - MeetingsDeleteMethod
      - AdminGetMethod
      - AdminExportMethod
      - BookingsOptionsMethod
      - BookingIdOptionsMethod
      - MeetingsOptionsMethod
      - MeetingIdOptionsMethod
      - AdminOptionsMethod
      - ExportOptionsMethod
    Properties:
      RestApiId: !Ref BookingApi
      StageName: !Ref Environment

  # Lambda Permissions
  BookingsLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref BookingsFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${BookingApi}/*/*/*'

  MeetingsLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref MeetingsFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${BookingApi}/*/*/*'

  AdminLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref AdminFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${BookingApi}/*/*/*'

Outputs:
  ApiUrl:
    Description: 'API Gateway URL'
    Value: !Sub 'https://${BookingApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}'
    Export:
      Name: !Sub '${AWS::StackName}-ApiUrl'

  CloudFrontUrl:
    Description: 'CloudFront Distribution URL'
    Value: !Sub 'https://${CloudFrontDistribution.DomainName}'
    Export:
      Name: !Sub '${AWS::StackName}-CloudFrontUrl'

  BucketName:
    Description: 'S3 Bucket Name for Data'
    Value: !Ref BookingDataBucket
    Export:
      Name: !Sub '${AWS::StackName}-BucketName'

  FrontendBucketName:
    Description: 'S3 Bucket Name for Frontend'
    Value: !Ref FrontendBucket
    Export:
      Name: !Sub '${AWS::StackName}-FrontendBucketName'

  BookingsFunctionName:
    Description: 'Bookings Lambda Function Name'
    Value: !Ref BookingsFunction
    Export:
      Name: !Sub '${AWS::StackName}-BookingsFunction'

  MeetingsFunctionName:
    Description: 'Meetings Lambda Function Name'
    Value: !Ref MeetingsFunction
    Export:
      Name: !Sub '${AWS::StackName}-MeetingsFunction'

  AdminFunctionName:
    Description: 'Admin Lambda Function Name'
    Value: !Ref AdminFunction
    Export:
      Name: !Sub '${AWS::StackName}-AdminFunction'